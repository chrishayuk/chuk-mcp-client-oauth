name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for (e.g., v0.1.1)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG=${{ inputs.tag }}
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${TAG#v}
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Verify version matches pyproject.toml
      run: |
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        if [ "${{ steps.get_version.outputs.version }}" != "${PYPROJECT_VERSION}" ]; then
          echo "Error: Tag version (${{ steps.get_version.outputs.version }}) does not match pyproject.toml version (${PYPROJECT_VERSION})"
          exit 1
        fi

    - name: Get previous tag
      id: get_previous_tag
      run: |
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "${{ steps.get_version.outputs.tag }}" | tail -1)
        if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "${{ steps.get_version.outputs.tag }}" ]; then
          # If no previous tag, use first commit
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        CHANGELOG=$(git log ${{ steps.get_previous_tag.outputs.previous_tag }}..${{ steps.get_version.outputs.tag }} \
          --pretty=format:"* %s (%h)" \
          --no-merges)

        # Save to file for multiline handling
        echo "$CHANGELOG" > changelog.txt

        # Count changes
        CHANGE_COUNT=$(echo "$CHANGELOG" | wc -l)
        echo "change_count=${CHANGE_COUNT}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.version }}
        body_path: changelog.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
